#!/usr/bin/env node

var getopts = require('getopts-compat');

var options = getopts(process.argv.slice(2), {
  alias: { engines: 'e', range: 'r', versions: 'v', silent: 's' },
  default: { range: 'major,even' },
  boolean: ['engines', 'cache', 'silent'],
  stopEarly: true,
});

// define.option('-e, --engines', 'use engines version range');
// define.option('-r, --range [range]', 'range type of major, minor, or patch with filters of lts, even, odd for version string expressions', 'major,even');
// define.option('-v, --versions [version]', 'comma-separated list of versions to run against', function (string) {
//   return string.split(',');
// });
// define.option('-s, --silent', 'suppress logging', false);
if (typeof options.versions === 'string') options.versions = options.versions.split(',');

var args = options._;
if (args.length < 1) {
  console.log('Missing command. Example usage: nvs --versions 0.10,4,6,14 [command]');
  return process.exit(-1);
}

var nvs = require('..');

if (!options.silent)
  options.header = function (version, command, args) {
    console.log('\n----------------------');
    console.log([command].concat(args).join(' ') + ' (' + version + ')');
    console.log('----------------------');
  };

nvs(args[0], args.slice(1), options, function (err, results) {
  if (err) {
    console.log(err.message);
    return process.exit(err.code || -1);
  }
  var errors = [];
  for (var index = 0; index < results.length; index++) {
    var result = results[index];
    if (result.error || result.result.code !== 0) errors.push(results[index]);
  }

  if (!options.silent) {
    console.log('\n======================');
    if (errors.length) {
      console.log('Errors (' + errors.length + ')');
      // eslint-disable-next-line no-redeclare
      for (var index = 0; index < errors.length; index++) {
        // eslint-disable-next-line no-redeclare
        var result = errors[index];
        if (result.error) console.log(result.version + ' Error: ' + result.error.message);
        else console.log(result.version + ' Exit Code: ' + result.result.code);
      }
    } else console.log('Success (' + results.length + ')');
    console.log('======================');
  }

  process.exit(errors.length ? -1 : 0);
});
